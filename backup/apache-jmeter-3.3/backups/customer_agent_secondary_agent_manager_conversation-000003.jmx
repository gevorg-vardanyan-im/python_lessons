<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ENVIRONMENT" elementType="Argument">
            <stringProp name="Argument.name">ENVIRONMENT</stringProp>
            <stringProp name="Argument.value">${__P(ENVIRONMENT,perf)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_NAME" elementType="Argument">
            <stringProp name="Argument.name">SERVER_NAME</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf.engage.pivotus.io)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROVIDER" elementType="Argument">
            <stringProp name="Argument.name">PROVIDER</stringProp>
            <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEMP_ID" elementType="Argument">
            <stringProp name="Argument.name">TEMP_ID</stringProp>
            <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AGENTS_COUNT" elementType="Argument">
            <stringProp name="Argument.name">AGENTS_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(AGENTS_COUNT,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CUSTOMERS_PER_AGENT_COUNT" elementType="Argument">
            <stringProp name="Argument.name">CUSTOMERS_PER_AGENT_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(CUSTOMERS_PER_AGENT_COUNT,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CUSTOMERS_USER_TYPE" elementType="Argument">
            <stringProp name="Argument.name">CUSTOMERS_USER_TYPE</stringProp>
            <stringProp name="Argument.value">${__P(CUSTOMERS_USER_TYPE,CUSTOMER)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1520338853000</longProp>
        <longProp name="ThreadGroup.end_time">1520338853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ENVIRONMENT" elementType="Argument">
              <stringProp name="Argument.name">ENVIRONMENT</stringProp>
              <stringProp name="Argument.value">${__P(ENVIRONMENT,perf)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SERVER_NAME" elementType="Argument">
              <stringProp name="Argument.name">SERVER_NAME</stringProp>
              <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf.engage.pivotus.io)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PATH" elementType="Argument">
              <stringProp name="Argument.name">PATH</stringProp>
              <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROVIDER" elementType="Argument">
              <stringProp name="Argument.name">PROVIDER</stringProp>
              <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TEMP_ID" elementType="Argument">
              <stringProp name="Argument.name">TEMP_ID</stringProp>
              <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AGENTS_COUNT" elementType="Argument">
              <stringProp name="Argument.name">AGENTS_COUNT</stringProp>
              <stringProp name="Argument.value">${__P(AGENTS_COUNT,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Unique agents amount.</stringProp>
            </elementProp>
            <elementProp name="CUSTOMERS_PER_AGENT_COUNT" elementType="Argument">
              <stringProp name="Argument.name">CUSTOMERS_PER_AGENT_COUNT</stringProp>
              <stringProp name="Argument.value">${__P(CUSTOMERS_PER_AGENT_COUNT,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">How many customers will have one agent.</stringProp>
            </elementProp>
            <elementProp name="CUSTOMERS_USER_TYPE" elementType="Argument">
              <stringProp name="Argument.name">CUSTOMERS_USER_TYPE</stringProp>
              <stringProp name="Argument.value">${__P(CUSTOMERS_USER_TYPE,CUSTOMER)}</stringProp>
              <stringProp name="Argument.desc">User type will be &quot;CUSTOMER&quot; or &quot;PROSPECT&quot;.</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OUT_FILE_NAME" elementType="Argument">
              <stringProp name="Argument.name">OUT_FILE_NAME</stringProp>
              <stringProp name="Argument.value">${__P(OUT_FILE_NAME,one_to_one_customer_agent_second_agent_manager_conversation)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">File in which will store users info.</stringProp>
            </elementProp>
            <elementProp name="okta_token" elementType="Argument">
              <stringProp name="Argument.name">okta_token</stringProp>
              <stringProp name="Argument.value">00DLKF7NlK6VbGDLigaslQPFB2rHJnCLBzB-3PDVfs</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="okta_manager_group_id" elementType="Argument">
              <stringProp name="Argument.name">okta_manager_group_id</stringProp>
              <stringProp name="Argument.value">00gdlwpkx1VFdXRjS0h7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="okta_agent_group_id" elementType="Argument">
              <stringProp name="Argument.name">okta_agent_group_id</stringProp>
              <stringProp name="Argument.value">00gdlwpkx1VFdXRjS0h7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OKTA_PATH" elementType="Argument">
              <stringProp name="Argument.name">OKTA_PATH</stringProp>
              <stringProp name="Argument.value">https://dev-705996-admin.oktapreview.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">P@ssw0rd</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="access_token" elementType="Argument">
              <stringProp name="Argument.name">access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_access_token" elementType="Argument">
              <stringProp name="Argument.name">customer_access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="user_id" elementType="Argument">
              <stringProp name="Argument.name">user_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_name" elementType="Argument">
              <stringProp name="Argument.name">customer_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_id" elementType="Argument">
              <stringProp name="Argument.name">customer_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agent_name" elementType="Argument">
              <stringProp name="Argument.name">agent_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agent_id" elementType="Argument">
              <stringProp name="Argument.name">agent_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ids" elementType="Argument">
              <stringProp name="Argument.name">ids</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="conversation_id" elementType="Argument">
              <stringProp name="Argument.name">conversation_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counter" elementType="Argument">
              <stringProp name="Argument.name">counter</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="manager_access_token" elementType="Argument">
              <stringProp name="Argument.name">manager_access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="manager_name" elementType="Argument">
              <stringProp name="Argument.name">manager_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="manager_id" elementType="Argument">
              <stringProp name="Argument.name">manager_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ou_name" elementType="Argument">
              <stringProp name="Argument.name">ou_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER_NAME}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">origin</stringProp>
              <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept-encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept-language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9,hy;q=0.8,vi;q=0.7</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">user-agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">referer</stringProp>
              <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}/login</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authority</stringProp>
              <stringProp name="Header.value">${SERVER_NAME}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Users creation" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${AGENTS_COUNT}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Default login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${SUPER_ADMIN_USERNAME}&quot;, &#xd;
    &quot;password&quot;:&quot;${SUPER_ADMIN_PASSWORD}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract an access token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
              <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Failed to retrieve access token.&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Set environment as VARIABLE from PARAMETER" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;environment&quot;, vars.get(&quot;ENVIRONMENT&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create agent" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;firstName&quot;:&quot;${agent_name}&quot;,&#xd;
    &quot;lastName&quot;:&quot;${user_id}&quot;,&#xd;
    &quot;username&quot;:&quot;${agent_name}&quot;,&#xd;
    &quot;identities&quot;:[{&#xd;
        &quot;provider&quot;:&quot;${PROVIDER}&quot;,&#xd;
        &quot;id&quot;:&quot;${agent_name}&quot;,&#xd;
        &quot;password&quot;:&quot;${password}&quot;,&#xd;
        &quot;type&quot;:&quot;LOCAL&quot;&#xd;
        }],&#xd;
        &quot;roles&quot;:[&quot;EMPLOYEE&quot;, &quot;AGENT&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/users</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate username and id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;agent_name&quot;, &quot;${ENVIRONMENT}Agent${__time(/10,)}${__threadNum}@pivotus.local&quot;);
vars.put(&quot;user_id&quot;, &quot;${__time(/10,)}${__threadNum}&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate returned id for created agent" enabled="true">
              <stringProp name="BeanShellAssertion.query">//---* Response body assertion *---

String actualData = SampleResult.getResponseDataAsString();
String expectedPattern = &quot;[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}&quot;;
if (!actualData.matches(expectedPattern)) {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response body error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedPattern + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualData)
   	.toString();
}

//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;201&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store an agent id" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;agent_id&quot;, prev.getResponseDataAsString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create agent (OKTA)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;profile&quot;: {&#xd;
    &quot;firstName&quot;: &quot;${agent_name}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${user_id}&quot;,&#xd;
    &quot;email&quot;: &quot;${agent_name}&quot;,&#xd;
    &quot;login&quot;: &quot;${agent_name}&quot;&#xd;
  },&#xd;
  &quot;credentials&quot;: {&#xd;
    &quot;password&quot;: {&#xd;
      &quot;value&quot;: &quot;${password}&quot;&#xd;
    },&#xd;
    &quot;recovery_question&quot;: {&#xd;
      &quot;question&quot;: &quot;Was this created with API?&quot;,&#xd;
      &quot;answer&quot;: &quot;absolutely&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;groupIds&quot;: [&#xd;
    &quot;${okta_agent_group_id}&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${OKTA_PATH}/api/v1/users</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">SSWS ${okta_token}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate a response code" enabled="true">
              <stringProp name="BeanShellAssertion.query">//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;200&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create secondary agent" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;firstName&quot;:&quot;${secondary_agent_name}&quot;,&#xd;
    &quot;lastName&quot;:&quot;${user_id}&quot;,&#xd;
    &quot;username&quot;:&quot;${secondary_agent_name}&quot;,&#xd;
    &quot;identities&quot;:[{&#xd;
        &quot;provider&quot;:&quot;${PROVIDER}&quot;,&#xd;
        &quot;id&quot;:&quot;${secondary_agent_name}&quot;,&#xd;
        &quot;password&quot;:&quot;${password}&quot;,&#xd;
        &quot;type&quot;:&quot;LOCAL&quot;&#xd;
        }],&#xd;
        &quot;roles&quot;:[&quot;EMPLOYEE&quot;, &quot;AGENT&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/users</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate username and id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;secondary_agent_name&quot;, &quot;${ENVIRONMENT}Agent${__time(/10,)}${__threadNum}@pivotus.local&quot;);
vars.put(&quot;user_id&quot;, &quot;${__time(/10,)}${__threadNum}&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate returned id for created agent" enabled="true">
              <stringProp name="BeanShellAssertion.query">//---* Response body assertion *---

String actualData = SampleResult.getResponseDataAsString();
String expectedPattern = &quot;[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}&quot;;
if (!actualData.matches(expectedPattern)) {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response body error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedPattern + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualData)
   	.toString();
}

//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;201&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store an agent id" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;secondary_agent_id&quot;, prev.getResponseDataAsString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create secondary agent (OKTA)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;profile&quot;: {&#xd;
    &quot;firstName&quot;: &quot;${secondary_agent_name}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${user_id}&quot;,&#xd;
    &quot;email&quot;: &quot;${secondary_agent_name}&quot;,&#xd;
    &quot;login&quot;: &quot;${secondary_agent_name}&quot;&#xd;
  },&#xd;
  &quot;credentials&quot;: {&#xd;
    &quot;password&quot;: {&#xd;
      &quot;value&quot;: &quot;${password}&quot;&#xd;
    },&#xd;
    &quot;recovery_question&quot;: {&#xd;
      &quot;question&quot;: &quot;Was this created with API?&quot;,&#xd;
      &quot;answer&quot;: &quot;absolutely&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;groupIds&quot;: [&#xd;
    &quot;${okta_agent_group_id}&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${OKTA_PATH}/api/v1/users</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">SSWS ${okta_token}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate a response code" enabled="true">
              <stringProp name="BeanShellAssertion.query">//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;200&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create manager" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;firstName&quot;:&quot;${manager_name}&quot;,&#xd;
    &quot;lastName&quot;:&quot;${user_id}&quot;,&#xd;
    &quot;username&quot;:&quot;${manager_name}&quot;,&#xd;
    &quot;identities&quot;:[{&#xd;
        &quot;provider&quot;:&quot;${PROVIDER}&quot;,&#xd;
        &quot;id&quot;:&quot;${manager_name}&quot;,&#xd;
        &quot;password&quot;:&quot;${password}&quot;,&#xd;
        &quot;type&quot;:&quot;LOCAL&quot;&#xd;
        }],&#xd;
        &quot;roles&quot;:[&quot;EMPLOYEE&quot;, &quot;MANAGER&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/users</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate username and id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;manager_name&quot;, &quot;${ENVIRONMENT}Manager${__time(/10,)}${__threadNum}@pivotus.local&quot;);
vars.put(&quot;user_id&quot;, &quot;${__time(/10,)}${__threadNum}&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate a manager id" enabled="true">
              <stringProp name="BeanShellAssertion.query">//---* Response body assertion *---

String actualData = SampleResult.getResponseDataAsString();
String expectedPattern = &quot;[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}&quot;;
if (!actualData.matches(expectedPattern)) {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response body error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedPattern + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualData)
   	.toString();
}

//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;201&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store a manager id" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;manager_id&quot;, prev.getResponseDataAsString());</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create manager (OKTA)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;profile&quot;: {&#xd;
    &quot;firstName&quot;: &quot;${manager_name}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${user_id}&quot;,&#xd;
    &quot;email&quot;: &quot;${manager_name}&quot;,&#xd;
    &quot;login&quot;: &quot;${manager_name}&quot;&#xd;
  },&#xd;
  &quot;credentials&quot;: {&#xd;
    &quot;password&quot;: {&#xd;
      &quot;value&quot;: &quot;${password}&quot;&#xd;
    },&#xd;
    &quot;recovery_question&quot;: {&#xd;
      &quot;question&quot;: &quot;Was this created with API?&quot;,&#xd;
      &quot;answer&quot;: &quot;absolutely&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;groupIds&quot;: [&#xd;
    &quot;${okta_manager_group_id}&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${OKTA_PATH}/api/v1/users</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">SSWS ${okta_token}</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate a response code" enabled="true">
              <stringProp name="BeanShellAssertion.query">//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;200&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Manager login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${manager_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract an access token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">manager_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
              <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;manager_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Failed to retrieve access token.&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create OU" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;${ou_name}&quot;,&#xd;
    &quot;manager&quot;: &quot;${manager_id}&quot;,&#xd;
    &quot;members&quot;: [&quot;${agent_id}&quot;, &quot;${secondary_agent_id}&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ous</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate username and id" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;ou_name&quot;, &quot;${ENVIRONMENT}OU ${__time(/10,)}${__threadNum}&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${manager_access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an OU id" enabled="true">
              <stringProp name="BeanShellAssertion.query">//---* Response body assertion *---

String actualData = SampleResult.getResponseDataAsString();
vars.put(&quot;ou_id&quot;, actualData);
String expectedPattern = &quot;[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}&quot;;

if (!actualData.matches(expectedPattern)) {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response body error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedPattern + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualData)
   	.toString();
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create and save customer" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${CUSTOMERS_PER_AGENT_COUNT}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create customer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;firstName&quot;:&quot;${customer_name}&quot;,&#xd;
    &quot;lastName&quot;:&quot;${user_id}&quot;,&#xd;
    &quot;username&quot;:&quot;${customer_name}&quot;,&#xd;
    &quot;identities&quot;:[{&#xd;
        &quot;provider&quot;:&quot;${PROVIDER}&quot;,&#xd;
        &quot;id&quot;:&quot;${customer_name}&quot;,&#xd;
        &quot;password&quot;:&quot;${password}&quot;,&#xd;
        &quot;type&quot;:&quot;LOCAL&quot;&#xd;
        }],&#xd;
        &quot;roles&quot;:[&quot;MOBILE_USER&quot;,&quot;${CUSTOMERS_USER_TYPE}&quot;]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/users</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate customer name" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;customer_name&quot;, &quot;${ENVIRONMENT}Customer${__time(/10,)}${__threadNum}@pivotus.local&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate returned id for created customer" enabled="true">
                <stringProp name="BeanShellAssertion.query">//---* Response body assertion *---

String actualData = SampleResult.getResponseDataAsString();
String expectedPattern = &quot;[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}&quot;;
if (!actualData.matches(expectedPattern)) {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response body error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedPattern + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualData)
   	.toString();
}

//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;201&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store a customer id" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;customer_id&quot;, prev.getResponseDataAsString());</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create customer (OKTA)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;profile&quot;: {&#xd;
    &quot;firstName&quot;: &quot;${customer_name}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${user_id}&quot;,&#xd;
    &quot;email&quot;: &quot;${customer_name}&quot;,&#xd;
    &quot;login&quot;: &quot;${customer_name}&quot;,&#xd;
    &quot;userType&quot;: &quot;${CUSTOMERS_USER_TYPE}&quot;&#xd;
  },&#xd;
  &quot;credentials&quot;: {&#xd;
    &quot;password&quot;: {&#xd;
      &quot;value&quot;: &quot;${password}&quot;&#xd;
    },&#xd;
    &quot;recovery_question&quot;: {&#xd;
      &quot;question&quot;: &quot;Was this created with API?&quot;,&#xd;
      &quot;answer&quot;: &quot;absolutely&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;groupIds&quot;: [&#xd;
    &quot;00gdlwzjn3L1GdSil0h7&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://dev-705996-admin.oktapreview.com/api/v1/users</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">SSWS ${okta_token}</stringProp>
                  </elementProp>
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate a response code" enabled="true">
                <stringProp name="BeanShellAssertion.query">//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;200&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Customer login" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${customer_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract an access token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">customer_access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
                <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;customer_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Failed to retrieve access token.&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select agent" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;agent&quot;:&quot;${agent_id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/agents</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${customer_access_token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate &apos;Select agent&apos; response" enabled="true">
                <stringProp name="BeanShellAssertion.query">//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;200&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}

//---* Response body assertion *---

String actualData = SampleResult.getResponseMessage();
String expectedMessage = &quot;OK&quot;;
if (!actualData.matches(expectedMessage)) {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response message error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedMessage + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualData)
   	.toString();
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get conversation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/conversations/@mine</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${customer_access_token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Store a conversation id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">conversation_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.items..id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Join second agent" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;userId&quot;:&quot;${secondary_agent_id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/conversations/${conversation_id}/join</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${customer_access_token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate &apos;Select agent&apos; response" enabled="true">
                <stringProp name="BeanShellAssertion.query">//---* Response code assertion *---

String actualCode = SampleResult.getResponseCode();
String expectedCode = &quot;200&quot;;
if (!actualCode.equals(expectedCode))  {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response code error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedCode + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualCode)
   	.toString();
}

//---* Response body assertion *---

String actualData = SampleResult.getResponseMessage();
String expectedMessage = &quot;OK&quot;;
if (!actualData.matches(expectedMessage)) {
   Failure = true;
   FailureMessage = new StringBuilder(&quot;Response message error!\n&quot;)
   	.append(&quot;Expected result: &quot; + expectedMessage + &quot;\n&quot;)
   	.append(&quot;Actual result: &quot; + actualData)
   	.toString();
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store customer, agents, manager, conversation info into file" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//---* Store users info into the given &apos;.csv&apos; file *---

String env = vars.get(&quot;ENVIRONMENT&quot;);
String file = vars.get(&quot;OUT_FILE_NAME&quot;);
String destination = &quot;./data/&quot; + env + &quot;/&quot; + file + &quot;.csv&quot;;
String customer_name = vars.get(&quot;customer_name&quot;);
String customer_id = vars.get(&quot;customer_id&quot;);
String agent_name = vars.get(&quot;agent_name&quot;);
String agent_id = vars.get(&quot;agent_id&quot;);
String second_agent_name = vars.get(&quot;secondary_agent_name&quot;);
String second_agent_id = vars.get(&quot;secondary_agent_id&quot;);
String manager_name = vars.get(&quot;manager_name&quot;);
String manager_id = vars.get(&quot;manager_id&quot;);
String ou_name = vars.get(&quot;ou_name&quot;);
String ou_id = vars.get(&quot;ou_id&quot;);
String password = vars.get(&quot;password&quot;);
String conversation_id = vars.get(&quot;conversation_id&quot;);

if (null != conversation_id &amp;&amp; !conversation_id.isEmpty()) {
	String usersInfo = new StringBuilder(customer_name + &quot;,&quot;)
		.append(customer_id + &quot;,&quot;)
		.append(agent_name + &quot;,&quot;)
		.append(agent_id + &quot;,&quot;)
		.append(second_agent_name + &quot;,&quot;)
		.append(second_agent_id + &quot;,&quot;)
		.append(manager_name + &quot;,&quot;)
		.append(manager_id + &quot;,&quot;)
		.append(ou_name + &quot;,&quot;)
		.append(ou_id + &quot;,&quot;)
		.append(password + &quot;,&quot;)
		.append(conversation_id)
		.toString();

	outFile = new FileOutputStream(destination, true);
	outStream = new PrintStream(outFile);
	this.interpreter.setOut(outStream);
	print(usersInfo);
	outFile.close();
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="graphiteMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">graphiteMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphiteHost" elementType="Argument">
                <stringProp name="Argument.name">graphiteHost</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="graphitePort" elementType="Argument">
                <stringProp name="Argument.name">graphitePort</stringProp>
                <stringProp name="Argument.value">2003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rootMetricsPrefix" elementType="Argument">
                <stringProp name="Argument.name">rootMetricsPrefix</stringProp>
                <stringProp name="Argument.value">jmeter.</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">90;95;99</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
