<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">TestRail link is &quot;https://pivotusventures.testrail.io/index.php?/cases/view/315&quot;.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ENVIRONMENT" elementType="Argument">
            <stringProp name="Argument.name">ENVIRONMENT</stringProp>
            <stringProp name="Argument.value">${__P(ENVIRONMENT,perf2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_NAME" elementType="Argument">
            <stringProp name="Argument.name">SERVER_NAME</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf2.engage.pivotus.io)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROVIDER" elementType="Argument">
            <stringProp name="Argument.name">PROVIDER</stringProp>
            <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEMP_ID" elementType="Argument">
            <stringProp name="Argument.name">TEMP_ID</stringProp>
            <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_SENDING_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_SENDING_PERIOD</stringProp>
            <stringProp name="Argument.value">${__P(MESSAGE_SENDING_PERIOD,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="response_code" elementType="Argument">
            <stringProp name="Argument.name">response_code</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ENVIRONMENT" elementType="Argument">
              <stringProp name="Argument.name">ENVIRONMENT</stringProp>
              <stringProp name="Argument.value">${__P(ENVIRONMENT,perf2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SERVER_NAME" elementType="Argument">
              <stringProp name="Argument.name">SERVER_NAME</stringProp>
              <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf2.engage.pivotus.io)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PATH" elementType="Argument">
              <stringProp name="Argument.name">PATH</stringProp>
              <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROVIDER" elementType="Argument">
              <stringProp name="Argument.name">PROVIDER</stringProp>
              <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TEMP_ID" elementType="Argument">
              <stringProp name="Argument.name">TEMP_ID</stringProp>
              <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MESSAGE_SENDING_PERIOD" elementType="Argument">
              <stringProp name="Argument.name">MESSAGE_SENDING_PERIOD</stringProp>
              <stringProp name="Argument.value">${__P(MESSAGE_SENDING_PERIOD,3)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agent_name" elementType="Argument">
              <stringProp name="Argument.name">agent_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agent_id" elementType="Argument">
              <stringProp name="Argument.name">agent_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="conversation_id" elementType="Argument">
              <stringProp name="Argument.name">conversation_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="access_token" elementType="Argument">
              <stringProp name="Argument.name">access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="message_text" elementType="Argument">
              <stringProp name="Argument.name">message_text</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="response_code" elementType="Argument">
              <stringProp name="Argument.name">response_code</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="key_number" elementType="Argument">
              <stringProp name="Argument.name">key_number</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER_NAME}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">origin</stringProp>
              <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept-encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept-language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9,hy;q=0.8,vi;q=0.7</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">user-agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">referer</stringProp>
              <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}/login</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">authority</stringProp>
              <stringProp name="Header.value">${SERVER_NAME}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Agents" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">data/${ENVIRONMENT}/one_agent_ten_conversations__name_pass_id.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">agent_name,agent_id,agent_password,conversation_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Managers" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">data/${ENVIRONMENT}/manager__name_pass_id.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">manager_name,password,manager_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Manager login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${manager_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Store an access token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
              <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Fail to retrieve access token.&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get messages ids" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/conversations/${conversation_id}/messages?size=1000</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">isMassMessage</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[*].isMassMessage</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">recalled</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[*].recalled</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">massMessageId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.items[*].massMessageId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Storing" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.util.List;
import java.util.ArrayList;

String agent_id = vars.get(&quot;agent_id&quot;);
String agent_name = vars.get(&quot;agent_name&quot;);
String password = vars.get(&quot;password&quot;);
String ENV = vars.get(&quot;ENVIRONMENT&quot;);

String is_mass_message_number;
String mass_message_id_number;
String recalled_status_number;

String is_mass_message;
String mass_message_id;
String recalled_status;

int count = Integer.parseInt(vars.get(&quot;massMessageId_matchNr&quot;));

//log.info(&quot;count   &quot;+count);

ArrayList myList = new ArrayList();

for (int i = 1; i &lt;= count; i++) {

	is_mass_message_number = &quot;isMassMessage_&quot; + i;
	mass_message_id_number = &quot;massMessageId_&quot; + i;
	recalled_status_number = &quot;recalled_&quot; + i;

	is_mass_message = vars.get(is_mass_message_number);
	mass_message_id = vars.get(mass_message_id_number);
	recalled_status = vars.get(recalled_status_number);

	//log.info(&quot;is_mass_message &quot; + is_mass_message.equals(&quot;true&quot;));
	//log.info(mass_message_id);

	if (is_mass_message.equals(&quot;true&quot;) &amp;&amp; mass_message_id != null &amp;&amp; !mass_message_id.isEmpty() &amp;&amp; recalled_status.equals(&quot;false&quot;)) {
	
		myList.add(mass_message_id);
		
		//log.info(&quot;iiiiiiiiiiiii     &quot;+ i);
		
	}

}

//log.info(&quot;myList.size() &quot; + myList.size());

if (myList.size() == 0){

	log.info(&quot;&gt;&gt;&gt;&gt;&gt; the test is stopped because there are no corresponding messages, try to increase the number of the size in &apos;api/conversations/${conversation_id}/messages?size=1000 request &lt;&lt;&lt;&lt;&lt;&quot;);
	ctx.getEngine().askThreadsToStop();
	
} else {
	
	bsh.shared.myArray${__threadNum} = myList;

}

//for (int i = 0; i &lt; bsh.shared.myArray${__threadNum}.size(); i++) {
	
  //log.info(&quot;myList &quot;+ bsh.shared.myArray${__threadNum}.get(i));

//}

		</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Forever" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <intProp name="LoopController.loops">-1</intProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Manager recall mass message" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/messages/mass/${mass_message_id}/recall</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//log.info(&quot;hhhhhhhhhhhhh&quot;);

int count = Integer.parseInt(vars.get(&quot;key_number&quot;));

if (bsh.shared.myArray${__threadNum}.size() == count){
	
	log.info(&quot;&gt;&gt;&gt;&gt;&gt; the test is stopped because all gotten message ids are recalled &lt;&lt;&lt;&lt;&lt;&quot;);
	ctx.getEngine().askThreadsToStop();
	
} else {

	vars.put(&quot;mass_message_id&quot;, bsh.shared.myArray${__threadNum}.get(count));
	
}

//log.info(&quot;key number before&quot; + vars.get(&quot;key_number&quot;));

//ArrayList array = bsh.shared.myArray;

//for (int i = 0; i &lt; bsh.shared.myArray${__threadNum}.size(); i++) {
	
  //log.info(&quot;array &quot;+ bsh.shared.myArray${__threadNum}.get(i));

//}

//log.info(&quot;array.size() = &quot; + bsh.shared.myArray${__threadNum}.size());

//log.info(vars.get(&quot;key_number&quot;) + &quot;or&quot; + count + &quot; = &quot; + bsh.shared.myArray${__threadNum}.get(count));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract a message id, recalled state, an agent id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">main_id;recalled;recalledBy</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id;$.recalled;$.recalledBy</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">not_found;not_found;not_found</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check a message id" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1077643114">${mass_message_id}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">main_id</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check a recalled state" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">recalled</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check an manager id" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1059296761">${manager_id}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">recalledBy</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract a pairList conversation id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">pairList_conversation_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.conversationMessagePairList[*].conversationId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">not_found</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract a pairList message id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">pairList_message_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.conversationMessagePairList[*].messageId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">not_found</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate a conversation id, mesasge id, access token state" enabled="true">
                <stringProp name="BeanShellAssertion.query">//log.info(&quot;main_id &quot; + vars.get(&quot;main_id&quot;));
//log.info(&quot;recalled &quot; + vars.get(&quot;recalled&quot;));
//log.info(&quot;recalledBy &quot; + vars.get(&quot;recalledBy&quot;));

public void verifyValue(value) {

	if (value.isEmpty() || value == null) {
		Failure = true;
		FailureMessage = value + &quot; is null or emty&quot;;
	}
	
}

if (vars.get(&quot;pairList_conversation_id_matchNr&quot;) == 0) {
	Failure = true;
	FailureMessage = &quot;there is not any pairList&quot;;
}

String list_conversation_id_number;
String list_message_id_number;

String list_conversation_id;
String list_message_id;

String actualCode = prev.getResponseCode();

if (actualCode != null) {
	vars.put(&quot;response_code&quot;, actualCode);
}

if (vars.get(&quot;response_code&quot;).equals(&quot;403&quot;)) {
	
	Failure = false;
	SampleResult.setSuccessful(true);
	
} else {

	int count = Integer.parseInt(vars.get(&quot;pairList_conversation_id_matchNr&quot;));

	//vars.put(&quot;items&quot;, vars.get(&quot;pairList_conversation_id_matchNr&quot;));

	//log.info(&quot;count   &quot;+count);
	
	for (int i = 1; i &lt;= count; i++) {

		list_conversation_id_number = &quot;pairList_conversation_id_&quot; + i;
		list_message_id_number = &quot;pairList_message_id_&quot; + i;
	
		list_conversation_id = vars.get(list_conversation_id_number);
		list_message_id = vars.get(list_message_id_number);

		verifyValue(list_conversation_id);
		verifyValue(list_message_id);

		//log.info(&quot;pairList_conversation_id &quot; + vars.get(&quot;pairList_conversation_id_1&quot;));
		//log.info(&quot;pairList_message_id &quot; + vars.get(&quot;pairList_message_id_1&quot;));

		//log.info(&quot;iiiiiiiiiiiii     &quot;+ i);
	
	}

}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Change the key number" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int count = Integer.parseInt(vars.get(&quot;key_number&quot;));
//log.info(&quot;key number before&quot; + vars.get(&quot;key_number&quot;));
vars.put(&quot;key_number&quot;, String.valueOf(count + 1));
//log.info(&quot;key number after&quot; + vars.get(&quot;key_number&quot;));</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay between messages recalling" enabled="true">
                <stringProp name="ConstantTimer.delay">${__jexl3(${MESSAGE_SENDING_PERIOD} * 1000)}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${response_code}&quot;==&quot;403&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login again" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${agent_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Store an access token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">agent_access_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;agent_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Fail to retrieve access token.&quot;;
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1521637015000</longProp>
        <longProp name="ThreadGroup.end_time">1521637015000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="170071582">Test Fragment</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
