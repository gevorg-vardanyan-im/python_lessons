<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ENVIRONMENT" elementType="Argument">
            <stringProp name="Argument.name">ENVIRONMENT</stringProp>
            <stringProp name="Argument.value">${__P(ENVIRONMENT,perf)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_NAME" elementType="Argument">
            <stringProp name="Argument.name">SERVER_NAME</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf.engage.pivotus.io)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROVIDER" elementType="Argument">
            <stringProp name="Argument.name">PROVIDER</stringProp>
            <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEMP_ID" elementType="Argument">
            <stringProp name="Argument.name">TEMP_ID</stringProp>
            <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_SENDING_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_SENDING_PERIOD</stringProp>
            <stringProp name="Argument.value">${__P(MESSAGE_SENDING_PERIOD,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="response_code" elementType="Argument">
            <stringProp name="Argument.name">response_code</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true">
        <stringProp name="TestPlan.comments">TestRail link is &quot;https://pivotusventures.testrail.io/index.php?/cases/view/290&quot;.</stringProp>
      </TestFragmentController>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ENVIRONMENT" elementType="Argument">
              <stringProp name="Argument.name">ENVIRONMENT</stringProp>
              <stringProp name="Argument.value">${__P(ENVIRONMENT,perf2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SERVER_NAME" elementType="Argument">
              <stringProp name="Argument.name">SERVER_NAME</stringProp>
              <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf2.engage.pivotus.io)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PATH" elementType="Argument">
              <stringProp name="Argument.name">PATH</stringProp>
              <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROVIDER" elementType="Argument">
              <stringProp name="Argument.name">PROVIDER</stringProp>
              <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TEMP_ID" elementType="Argument">
              <stringProp name="Argument.name">TEMP_ID</stringProp>
              <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MESSAGE_SENDING_PERIOD" elementType="Argument">
              <stringProp name="Argument.name">MESSAGE_SENDING_PERIOD</stringProp>
              <stringProp name="Argument.value">${__P(MESSAGE_SENDING_PERIOD,3)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_name" elementType="Argument">
              <stringProp name="Argument.name">customer_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_id" elementType="Argument">
              <stringProp name="Argument.name">customer_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_access_token" elementType="Argument">
              <stringProp name="Argument.name">customer_access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="manager_name" elementType="Argument">
              <stringProp name="Argument.name">manager_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="manager_id" elementType="Argument">
              <stringProp name="Argument.name">manager_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="manager_access_token" elementType="Argument">
              <stringProp name="Argument.name">manager_access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="conversation_id" elementType="Argument">
              <stringProp name="Argument.name">conversation_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="message_text" elementType="Argument">
              <stringProp name="Argument.name">message_text</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="response_code" elementType="Argument">
              <stringProp name="Argument.name">response_code</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER_NAME}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load users" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">data/${ENVIRONMENT}/one_to_one_customer_agent_manager_conversation_1_2_0.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">customer_name, customer_id, agent_name, agent_id, manager_name, manager_id, ou_name, ou_id, password, conversation_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Customer login" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Customer login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${customer_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract an access token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customer_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
              <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;customer_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Failed to retrieve access token.&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Make test successful if there was &apos;443 failed to respond&#x9;&apos; response" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.samplers.SampleResult;

String actual_code = SampleResult.getResponseCode();
String undesired_code = &quot;Non HTTP response code&quot;;

if (actual_code.equals(undesired_code) || actual_code.contains(undesired_code)) {
	Failure = false;
	SampleResult.setSuccessful(true);
	SampleResult.setResponseCode(&quot;200&quot;);
	SampleResult.setResponseMessage(&quot;OK [from ignore case]&quot;);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Set environment as VARIABLE from PARAMETER" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;environment&quot;, vars.get(&quot;ENVIRONMENT&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Manager login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${manager_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract an access token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">manager_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
              <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;manager_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Failed to retrieve access token.&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Make test successful if there was &apos;443 failed to respond&#x9;&apos; response" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.samplers.SampleResult;

String actual_code = SampleResult.getResponseCode();
String undesired_code = &quot;Non HTTP response code&quot;;

if (actual_code.equals(undesired_code) || actual_code.contains(undesired_code)) {
	Failure = false;
	SampleResult.setSuccessful(true);
	SampleResult.setResponseCode(&quot;200&quot;);
	SampleResult.setResponseMessage(&quot;OK [from ignore case]&quot;);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Set environment as VARIABLE from PARAMETER" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;environment&quot;, vars.get(&quot;ENVIRONMENT&quot;));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Send - redact" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Customer WS Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Sec-WebSocket-Extensions</stringProp>
                <stringProp name="Header.value">permessage-deflate; client_max_window_bits</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Sec-WebSocket-Protocol</stringProp>
                <stringProp name="Header.value">access_token, ${customer_access_token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="Customer opens web socket connection" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server">${SERVER_NAME}</stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path">/api/notification/${customer_id}/stream</stringProp>
            <stringProp name="readTimeout">30000</stringProp>
            <stringProp name="connectTimeout">30000</stringProp>
          </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Make test successful if there was &apos;443 failed to respond&#x9;&apos; response" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.samplers.SampleResult;

String actual_code = SampleResult.getResponseCode();
String undesired_code = &quot;Non HTTP response code&quot;;

if (actual_code.equals(undesired_code) || actual_code.contains(undesired_code)) {
	Failure = false;
	SampleResult.setSuccessful(true);
	SampleResult.setResponseCode(&quot;200&quot;);
	SampleResult.setResponseMessage(&quot;OK [from ignore case]&quot;);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">origin</stringProp>
                <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept-encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept-language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9,hy;q=0.8,vi;q=0.7</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">user-agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">referer</stringProp>
                <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}/login</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">authority</stringProp>
                <stringProp name="Header.value">${SERVER_NAME}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Customer sends message" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;plainText&quot;:&quot;${message_text}&quot;,&#xd;
    &quot;tempId&quot;:&quot;${TEMP_ID}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/conversations/${conversation_id}/messages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${customer_access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate a message text and a conversation id" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="878388598">&quot;plainText&quot;:&quot;${message_text}&quot;</stringProp>
                <stringProp name="-816546624">&quot;conversation&quot;:&quot;${conversation_id}&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate a message text with custom failure message" enabled="true">
              <stringProp name="BeanShellAssertion.query">private void makeTestFailure(String expectedValue, String actualValue) {
	Failure = true;
	FailureMessage = new StringBuilder(&quot;Response error !\n&quot;)
		.append(&quot;Expected result: \&quot;&quot; + expectedValue + &quot;\&quot;\n&quot;)
		.append(&quot;Actual result: \&quot;&quot; + actualValue + &quot;\&quot;\n&quot;)
		.toString();
	return;
}

//   For 403 error set failure false
String responsCode = prev.getResponseCode();

if (responsCode != null) {
	vars.put(&quot;response_code&quot;, responsCode);
}

if (vars.get(&quot;response_code&quot;).equals(&quot;403&quot;)) {
	Failure = false;
	SampleResult.setSuccessful(true);
} else {
	//---* Response body assertion *---
	String actualData = SampleResult.getResponseDataAsString();
	String expectedData = &quot;\&quot;plainText\&quot;:\&quot;&quot; + vars.get(&quot;message_text&quot;) + &quot;\&quot;&quot;;

	if (actualData.isEmpty() || !actualData.contains(expectedData)) {
		makeTestFailure(expectedData, actualData);
	}

	String expectedId = &quot;\&quot;conversation\&quot;:\&quot;&quot; + vars.get(&quot;conversation_id&quot;) + &quot;\&quot;&quot;;
	if (!actualData.contains(expectedId)) {
		makeTestFailure(expectedId, actualData);
	}
	
	//---* Response url assertion *---
	String actualPath = SampleResult.getURL().getPath();
	String expectedPath = &quot;conversations&quot;;
	if (!actualPath.contains(expectedPath)) {
		makeTestFailure(expectedPath, actualPath);
	}
}

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay between messages sending" enabled="true">
              <stringProp name="ConstantTimer.delay">${__jexl3(${MESSAGE_SENDING_PERIOD} * 1000)}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Make test successful if there was &apos;443 failed to respond&#x9;&apos; response" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.samplers.SampleResult;

String actual_code = SampleResult.getResponseCode();
String undesired_code = &quot;Non HTTP response code&quot;;

if (actual_code.equals(undesired_code) || actual_code.contains(undesired_code)) {
	Failure = false;
	SampleResult.setSuccessful(true);
	SampleResult.setResponseCode(&quot;200&quot;);
	SampleResult.setResponseMessage(&quot;OK [from ignore case]&quot;);
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Login again if needed" enabled="false">
            <stringProp name="IfController.condition">&quot;${response_code}&quot;==&quot;403&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Customer login again" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${customer_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract an access token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">customer_access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
                <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;customer_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Failed to retrieve access token.&quot;;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Make test successful if there was &apos;443 failed to respond&#x9;&apos; response" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.apache.jmeter.samplers.SampleResult;

String actual_code = SampleResult.getResponseCode();
String undesired_code = &quot;Non HTTP response code&quot;;

if (actual_code.equals(undesired_code) || actual_code.contains(undesired_code)) {
	Failure = false;
	SampleResult.setSuccessful(true);
	SampleResult.setResponseCode(&quot;200&quot;);
	SampleResult.setResponseMessage(&quot;OK [from ignore case]&quot;);
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1521637015000</longProp>
        <longProp name="ThreadGroup.end_time">1521637015000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="170071582">Test Fragment</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
