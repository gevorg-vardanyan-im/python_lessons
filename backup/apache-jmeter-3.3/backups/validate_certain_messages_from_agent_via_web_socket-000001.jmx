<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">TestRail link is &quot;https://pivotusventures.testrail.io/index.php?/cases/view/2284&quot;.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ENVIRONMENT" elementType="Argument">
            <stringProp name="Argument.name">ENVIRONMENT</stringProp>
            <stringProp name="Argument.value">${__P(ENVIRONMENT,perf)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_NAME" elementType="Argument">
            <stringProp name="Argument.name">SERVER_NAME</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf.engage.pivotus.io)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROVIDER" elementType="Argument">
            <stringProp name="Argument.name">PROVIDER</stringProp>
            <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEMP_ID" elementType="Argument">
            <stringProp name="Argument.name">TEMP_ID</stringProp>
            <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEFAULT_SOCKET_TIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">DEFAULT_SOCKET_TIMEOUT</stringProp>
            <stringProp name="Argument.value">${__P(DEFAULT_SOCKET_TIMEOUT,5000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WEB_SOCKET_TIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">WEB_SOCKET_TIMEOUT</stringProp>
            <stringProp name="Argument.value">${__P(WEB_SOCKET_TIMEOUT,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_SENDING_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_SENDING_PERIOD</stringProp>
            <stringProp name="Argument.value">${__P(MESSAGE_SENDING_PERIOD,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ENVIRONMENT" elementType="Argument">
              <stringProp name="Argument.name">ENVIRONMENT</stringProp>
              <stringProp name="Argument.value">${__P(ENVIRONMENT,perf)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROTOCOL" elementType="Argument">
              <stringProp name="Argument.name">PROTOCOL</stringProp>
              <stringProp name="Argument.value">${__P(PROTOCOL,https)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SERVER_NAME" elementType="Argument">
              <stringProp name="Argument.name">SERVER_NAME</stringProp>
              <stringProp name="Argument.value">${__P(SERVER_NAME,pivotus.perf.engage.pivotus.io)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PATH" elementType="Argument">
              <stringProp name="Argument.name">PATH</stringProp>
              <stringProp name="Argument.value">${__P(PATH,/api)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_USERNAME" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_USERNAME</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_USERNAME,super_admin)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SUPER_ADMIN_PASSWORD" elementType="Argument">
              <stringProp name="Argument.name">SUPER_ADMIN_PASSWORD</stringProp>
              <stringProp name="Argument.value">${__P(SUPER_ADMIN_PASSWORD,Admin123)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PROVIDER" elementType="Argument">
              <stringProp name="Argument.name">PROVIDER</stringProp>
              <stringProp name="Argument.value">${__P(PROVIDER,080e79d0-59e9-4a7a-b51d-1c7bb02efce9)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TEMP_ID" elementType="Argument">
              <stringProp name="Argument.name">TEMP_ID</stringProp>
              <stringProp name="Argument.value">${__P(TEMP_ID,f846c3b9-4ace-4bf1-b42b-a990f9d9ca32)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="DEFAULT_SOCKET_TIMEOUT" elementType="Argument">
              <stringProp name="Argument.name">DEFAULT_SOCKET_TIMEOUT</stringProp>
              <stringProp name="Argument.value">${__P(DEFAULT_SOCKET_TIMEOUT,5000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="WEB_SOCKET_TIMEOUT" elementType="Argument">
              <stringProp name="Argument.name">WEB_SOCKET_TIMEOUT</stringProp>
              <stringProp name="Argument.value">${__P(WEB_SOCKET_TIMEOUT,3)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Time is in seconds. It translates in milliseconds in scope of &apos;Customer login&apos; request.</stringProp>
            </elementProp>
            <elementProp name="MESSAGE_SENDING_PERIOD" elementType="Argument">
              <stringProp name="Argument.name">MESSAGE_SENDING_PERIOD</stringProp>
              <stringProp name="Argument.value">${__P(MESSAGE_SENDING_PERIOD,3)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Time is in seconds. It translates in milliseconds in scope of &apos;Customer login&apos; request.</stringProp>
            </elementProp>
            <elementProp name="customer_name" elementType="Argument">
              <stringProp name="Argument.name">customer_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_id" elementType="Argument">
              <stringProp name="Argument.name">customer_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="customer_access_token" elementType="Argument">
              <stringProp name="Argument.name">customer_access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agent_name" elementType="Argument">
              <stringProp name="Argument.name">agent_name</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agent_id" elementType="Argument">
              <stringProp name="Argument.name">agent_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agent_access_token" elementType="Argument">
              <stringProp name="Argument.name">agent_access_token</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="conversation_id" elementType="Argument">
              <stringProp name="Argument.name">conversation_id</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="message_from_agent" elementType="Argument">
              <stringProp name="Argument.name">message_from_agent</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sent_by_agent" elementType="Argument">
              <stringProp name="Argument.name">sent_by_agent</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER_NAME}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load users" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">data/${ENVIRONMENT}/one_to_one_agents_customers_conversations.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">customer_name,customer_id,agent_name,agent_id,password,conversation_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login users and prepare time settings" enabled="true">
          <stringProp name="TestPlan.comments">NOTE: Translate seconds to milliseconds for socket timeout and sending period parameters (after customer login).</stringProp>
        </OnceOnlyController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${agent_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">origin</stringProp>
                  <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hy;q=0.8,vi;q=0.7</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">user-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}/login</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authority</stringProp>
                  <stringProp name="Header.value">${SERVER_NAME}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Store an access token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">agent_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
              <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;agent_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Fail to retrieve access token.&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Customer login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;:&quot;${customer_name}&quot;, &#xd;
    &quot;password&quot;:&quot;${password}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/auth/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">NOTE: Translate seconds to milliseconds for socket timeout and sending period parameters (after customer login).</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">origin</stringProp>
                  <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept-language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hy;q=0.8,vi;q=0.7</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">user-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">${PROTOCOL}://${SERVER_NAME}/login</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authority</stringProp>
                  <stringProp name="Header.value">${SERVER_NAME}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Store an access token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customer_access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Validate an access token" enabled="true">
              <stringProp name="BeanShellAssertion.query">String token = vars.get(&quot;customer_access_token&quot;);
if (token.isEmpty()) {
	Failure = true;
	FailureMessage = &quot;Fail to retrieve access token.&quot;;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Set message sending period and socket timeout" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String period = &quot;MESSAGE_SENDING_PERIOD&quot;;
String sendingPeriod = vars.get(period);
String actualPeriod = sendingPeriod + &quot;000&quot;;
vars.put(period, actualPeriod);

String timeout = &quot;WEB_SOCKET_TIMEOUT&quot;;
String socketTimeout = vars.get(timeout);
String actualTimeout = socketTimeout + &quot;000&quot;;
vars.put(timeout, actualTimeout);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Customer WS Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Sec-WebSocket-Extensions</stringProp>
              <stringProp name="Header.value">permessage-deflate; client_max_window_bits</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Sec-WebSocket-Protocol</stringProp>
              <stringProp name="Header.value">access_token, ${customer_access_token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="Customer open Connection" enabled="true">
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server">${SERVER_NAME}</stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path">/api/notification/${customer_id}/stream</stringProp>
          <stringProp name="readTimeout">3000</stringProp>
        </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Send / get messages" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Loop counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loop_number</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Agent send message" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;plainText&quot;:&quot;${message_from_agent}&quot;,&#xd;
    &quot;tempId&quot;:&quot;${TEMP_ID}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/conversations/${conversation_id}/messages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${agent_access_token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate a message" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// vars.put(&quot;message_from_agent&quot;, &quot;To customer at ${__time(hh:mm:ss a,)}&quot;);
vars.put(&quot;message_from_agent&quot;, &quot;${__time()}&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate a message text and a conversation id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-100122951">&quot;plainText&quot;:&quot;${message_from_agent}&quot;</stringProp>
                <stringProp name="-816546624">&quot;conversation&quot;:&quot;${conversation_id}&quot;</stringProp>
                <stringProp name="-238544281">&quot;type&quot;:&quot;text&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay between messages sending" enabled="true">
              <stringProp name="ConstantTimer.delay">${MESSAGE_SENDING_PERIOD}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait for certain message" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${sent_by_agent}&quot; != &quot;${message_from_agent}&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Customer get message notification from socket" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server">pivotus.qa.engage.pivotus.io</stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path">/api/notification/${conversation_id}/stream</stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="optional">false</boolProp>
              <stringProp name="readTimeout">${DEFAULT_SOCKET_TIMEOUT}</stringProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract received message" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">sent_by_agent</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.content.plainText</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validate a message text" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-100122951">&quot;plainText&quot;:&quot;${message_from_agent}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Agent check notification" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String actual = vars.get(&quot;sent_by_agent&quot;);
String expected = vars.get(&quot;message_from_agent&quot;);
String responseData = prev.getResponseDataAsString();
String messagePrefix = &quot;To customer&quot;;
String loopNumber = vars.get(&quot;loop_number&quot;);
String socketTimeout = vars.get(&quot;WEB_SOCKET_TIMEOUT&quot;);
String responseMessage = prev.getResponseMessage();
String timeoutError = &quot;WebSocket I/O error: Read timed out&quot;;

if (responseMessage.equals(timeoutError)) {
	Failure = true;
	FailureMessage = timeoutError;
}

//---* Calculate getting notification time *---
if (actual.equals(expected)) {
	String currentTime = &quot;${__time()}&quot;;
	double diff = (Long.parseLong(currentTime) - Long.parseLong(expected));
	// print(&quot;Delay: &quot; + diff + &quot; ms.&quot;);
}

//---* Change socket timeout after first connection *---
if (Integer.parseInt(loopNumber) &gt; 1) {
	vars.put(&quot;DEFAULT_SOCKET_TIMEOUT&quot;, socketTimeout);
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Agent check notification" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String actual = vars.get(&quot;sent_by_agent&quot;);
String expected = vars.get(&quot;message_from_agent&quot;);
String responseData = prev.getResponseDataAsString();
String messagePrefix = &quot;To customer&quot;;
String loopNumber = vars.get(&quot;loop_number&quot;);
String socketTimeout = vars.get(&quot;WEB_SOCKET_TIMEOUT&quot;);

if (Integer.parseInt(loopNumber) &gt; 1) {
	vars.put(&quot;DEFAULT_SOCKET_TIMEOUT&quot;, socketTimeout);
}

try {
	double diff = (Long.parseLong(expected) - Long.parseLong(actual));
	if (0.0 == diff) {
		print(&quot;Success: There was no delay.&quot; + &quot; ${__threadNum}&quot; + &quot; thread&quot;);
	}
	else {
		print(&quot;FAIL: There was &quot; + diff + &quot; milisecond(s) delay.&quot; + &quot; ${__threadNum}&quot; + &quot; thread&quot;);
	}
}
catch (Exception e) {
	print(&quot;Response was null&quot;);
}

if (actual.isEmpty()) {
//	print(&quot;[Customer checks WS status]&quot;);
}
else if (!responseData.contains(messagePrefix)) {
	Failure = true;
	FailureMessage = &quot;Response body error!&quot; + System.getProperty(&quot;line.separator&quot;) + &quot;Test expects to contain: &quot; + messagePrefix + &quot;in the response.&quot; + System.getProperty(&quot;line.separator&quot;) + &quot;Actual result: &quot; + responseData;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1521637015000</longProp>
        <longProp name="ThreadGroup.end_time">1521637015000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="170071582">Test Fragment</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
